import { Plugin, TFile, TFolder, moment } from 'obsidian';

interface DailyNoteSettings {
    dailyNoteFolder: string;
    weeklyNoteFolder: string;
    projectNoteFolder: string;
}

const DEFAULT_SETTINGS: DailyNoteSettings = {
    dailyNoteFolder: 'Daily Notes',
    weeklyNoteFolder: 'Weekly Notes',
    projectNoteFolder: 'Project Notes'
}

export default class DailyNotePlugin extends Plugin {
    settings: DailyNoteSettings;

    async onload() {
        await this.loadSettings();

        this.addCommand({
            id: 'create-daily-note',
            name: 'Create Daily Note',
            callback: () => this.createNote('daily')
        });

        this.addCommand({
            id: 'create-weekly-note',
            name: 'Create Weekly Note',
            callback: () => this.createNote('weekly')
        });

        this.addCommand({
            id: 'create-project-note',
            name: 'Create Project Note',
            callback: () => this.createNote('project')
        });
    }

    onunload() {

    }

    async loadSettings() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    }

    async saveSettings() {
        await this.saveData(this.settings);
    }

    async createNote(type: 'daily' | 'weekly' | 'project') {
        let folderPath = '';
        let fileName = '';

        switch (type) {
            case 'daily':
                folderPath = this.settings.dailyNoteFolder;
                fileName = moment().format('YYYY-MM-DD') + '.md';
                break;
            case 'weekly':
                folderPath = this.settings.weeklyNoteFolder;
                const weekStart = moment().startOf('isoWeek').format('YYYY-MM-DD');
                const weekEnd = moment().endOf('isoWeek').format('YYYY-MM-DD');
                fileName = `Week ${weekStart} - ${weekEnd}.md`;
                break;
            case 'project':
                folderPath = this.settings.projectNoteFolder;
                fileName = 'New Project.md';
                break;
        }

        const folder = this.app.vault.getAbstractFileByPath(folderPath) as TFolder;
        if (!folder) {
            await this.app.vault.createFolder(folderPath);
        }

        const filePath = `${folderPath}/${fileName}`;
        const existingFile = this.app.vault.getAbstractFileByPath(filePath) as TFile;
        if (!existingFile) {
            await this.app.vault.create(filePath, '');
            this.app.workspace.openLinkText(fileName, folderPath);
        }
    }
}